// Code generated by MockGen. DO NOT EDIT.
// Source: avito-intern/internal/app/transaction (interfaces: Repository)

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	models "avito-intern/internal/app/transaction/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// TransactionRepository is a mock of Repository interface.
type TransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *TransactionRepositoryMockRecorder
}

// TransactionRepositoryMockRecorder is the mock recorder for TransactionRepository.
type TransactionRepositoryMockRecorder struct {
	mock *TransactionRepository
}

// NewTransactionRepository creates a new mock instance.
func NewTransactionRepository(ctrl *gomock.Controller) *TransactionRepository {
	mock := &TransactionRepository{ctrl: ctrl}
	mock.recorder = &TransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *TransactionRepository) EXPECT() *TransactionRepositoryMockRecorder {
	return m.recorder
}

// GetTransactions mocks base method.
func (m *TransactionRepository) GetTransactions(arg0 int64, arg1 *models.Paginator) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", arg0, arg1)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *TransactionRepositoryMockRecorder) GetTransactions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*TransactionRepository)(nil).GetTransactions), arg0, arg1)
}
